// Generated by gencpp from file serial_command_client/send_commandRequest.msg
// DO NOT EDIT!


#ifndef SERIAL_COMMAND_CLIENT_MESSAGE_SEND_COMMANDREQUEST_H
#define SERIAL_COMMAND_CLIENT_MESSAGE_SEND_COMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_command_client
{
template <class ContainerAllocator>
struct send_commandRequest_
{
  typedef send_commandRequest_<ContainerAllocator> Type;

  send_commandRequest_()
    : command(0)
    , buffer()  {
    }
  send_commandRequest_(const ContainerAllocator& _alloc)
    : command(0)
    , buffer(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _command_type;
  _command_type command;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _buffer_type;
  _buffer_type buffer;





  typedef boost::shared_ptr< ::serial_command_client::send_commandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_command_client::send_commandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct send_commandRequest_

typedef ::serial_command_client::send_commandRequest_<std::allocator<void> > send_commandRequest;

typedef boost::shared_ptr< ::serial_command_client::send_commandRequest > send_commandRequestPtr;
typedef boost::shared_ptr< ::serial_command_client::send_commandRequest const> send_commandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_command_client::send_commandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_command_client::send_commandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_command_client::send_commandRequest_<ContainerAllocator1> & lhs, const ::serial_command_client::send_commandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.buffer == rhs.buffer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_command_client::send_commandRequest_<ContainerAllocator1> & lhs, const ::serial_command_client::send_commandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_command_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_command_client::send_commandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_command_client::send_commandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_command_client::send_commandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_command_client::send_commandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_command_client::send_commandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_command_client::send_commandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_command_client::send_commandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bda2754dbac533aafcdd7519ee5dd2d";
  }

  static const char* value(const ::serial_command_client::send_commandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bda2754dbac533aULL;
  static const uint64_t static_value2 = 0xafcdd7519ee5dd2dULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_command_client::send_commandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_command_client/send_commandRequest";
  }

  static const char* value(const ::serial_command_client::send_commandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_command_client::send_commandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 command\n"
"uint8[] buffer\n"
;
  }

  static const char* value(const ::serial_command_client::send_commandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_command_client::send_commandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.buffer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct send_commandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_command_client::send_commandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_command_client::send_commandRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "buffer[]" << std::endl;
    for (size_t i = 0; i < v.buffer.size(); ++i)
    {
      s << indent << "  buffer[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.buffer[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COMMAND_CLIENT_MESSAGE_SEND_COMMANDREQUEST_H
