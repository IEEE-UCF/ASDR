// Generated by gencpp from file coverage_path_planner/make_planResponse.msg
// DO NOT EDIT!


#ifndef COVERAGE_PATH_PLANNER_MESSAGE_MAKE_PLANRESPONSE_H
#define COVERAGE_PATH_PLANNER_MESSAGE_MAKE_PLANRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace coverage_path_planner
{
template <class ContainerAllocator>
struct make_planResponse_
{
  typedef make_planResponse_<ContainerAllocator> Type;

  make_planResponse_()
    : plan()  {
    }
  make_planResponse_(const ContainerAllocator& _alloc)
    : plan(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _plan_type;
  _plan_type plan;





  typedef boost::shared_ptr< ::coverage_path_planner::make_planResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coverage_path_planner::make_planResponse_<ContainerAllocator> const> ConstPtr;

}; // struct make_planResponse_

typedef ::coverage_path_planner::make_planResponse_<std::allocator<void> > make_planResponse;

typedef boost::shared_ptr< ::coverage_path_planner::make_planResponse > make_planResponsePtr;
typedef boost::shared_ptr< ::coverage_path_planner::make_planResponse const> make_planResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coverage_path_planner::make_planResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coverage_path_planner::make_planResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coverage_path_planner::make_planResponse_<ContainerAllocator1> & lhs, const ::coverage_path_planner::make_planResponse_<ContainerAllocator2> & rhs)
{
  return lhs.plan == rhs.plan;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coverage_path_planner::make_planResponse_<ContainerAllocator1> & lhs, const ::coverage_path_planner::make_planResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coverage_path_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::coverage_path_planner::make_planResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coverage_path_planner::make_planResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coverage_path_planner::make_planResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coverage_path_planner::make_planResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coverage_path_planner::make_planResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coverage_path_planner::make_planResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coverage_path_planner::make_planResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89526be3bcb6a9380bfd5badd496049d";
  }

  static const char* value(const ::coverage_path_planner::make_planResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89526be3bcb6a938ULL;
  static const uint64_t static_value2 = 0x0bfd5badd496049dULL;
};

template<class ContainerAllocator>
struct DataType< ::coverage_path_planner::make_planResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coverage_path_planner/make_planResponse";
  }

  static const char* value(const ::coverage_path_planner::make_planResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coverage_path_planner::make_planResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose[] plan\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::coverage_path_planner::make_planResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coverage_path_planner::make_planResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct make_planResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coverage_path_planner::make_planResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coverage_path_planner::make_planResponse_<ContainerAllocator>& v)
  {
    s << indent << "plan[]" << std::endl;
    for (size_t i = 0; i < v.plan.size(); ++i)
    {
      s << indent << "  plan[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.plan[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COVERAGE_PATH_PLANNER_MESSAGE_MAKE_PLANRESPONSE_H
